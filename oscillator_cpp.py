# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_oscillator_cpp', [dirname(__file__)])
        except ImportError:
            import _oscillator_cpp
            return _oscillator_cpp
        if fp is not None:
            try:
                _mod = imp.load_module('_oscillator_cpp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _oscillator_cpp = swig_import_helper()
    del swig_import_helper
else:
    import _oscillator_cpp
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def SL(t, y, ydot):
    return _oscillator_cpp.SL(t, y, ydot)
SL = _oscillator_cpp.SL

def AutonomEvolution(y, tau):
    return _oscillator_cpp.AutonomEvolution(y, tau)
AutonomEvolution = _oscillator_cpp.AutonomEvolution

def Make_step(y, width_p_, gap_, Kfactor_):
    return _oscillator_cpp.Make_step(y, width_p_, gap_, Kfactor_)
Make_step = _oscillator_cpp.Make_step

def Calc_x(y):
    return _oscillator_cpp.Calc_x(y)
Calc_x = _oscillator_cpp.Calc_x

def Calc_y(y):
    return _oscillator_cpp.Calc_y(y)
Calc_y = _oscillator_cpp.Calc_y

def collect_state(R, theta, y):
    return _oscillator_cpp.collect_state(R, theta, y)
collect_state = _oscillator_cpp.collect_state

def init(npt_, R0_, theta_0, width_p_, gap_, Kfactor_):
    return _oscillator_cpp.init(npt_, R0_, theta_0, width_p_, gap_, Kfactor_)
init = _oscillator_cpp.init
class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _oscillator_cpp.new_doubleArray(nelements)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _oscillator_cpp.delete_doubleArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _oscillator_cpp.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _oscillator_cpp.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _oscillator_cpp.doubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _oscillator_cpp.doubleArray_frompointer
    if _newclass:
        frompointer = staticmethod(_oscillator_cpp.doubleArray_frompointer)
doubleArray_swigregister = _oscillator_cpp.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t):
    return _oscillator_cpp.doubleArray_frompointer(t)
doubleArray_frompointer = _oscillator_cpp.doubleArray_frompointer


def new_doubleP():
    return _oscillator_cpp.new_doubleP()
new_doubleP = _oscillator_cpp.new_doubleP

def copy_doubleP(value):
    return _oscillator_cpp.copy_doubleP(value)
copy_doubleP = _oscillator_cpp.copy_doubleP

def delete_doubleP(obj):
    return _oscillator_cpp.delete_doubleP(obj)
delete_doubleP = _oscillator_cpp.delete_doubleP

def doubleP_assign(obj, value):
    return _oscillator_cpp.doubleP_assign(obj, value)
doubleP_assign = _oscillator_cpp.doubleP_assign

def doubleP_value(obj):
    return _oscillator_cpp.doubleP_value(obj)
doubleP_value = _oscillator_cpp.doubleP_value
# This file is compatible with both classic and new-style classes.


